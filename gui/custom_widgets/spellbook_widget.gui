
#######################################################
############### SPELLBOOK INTERACTION #################
#######################################################

#story cycles for ai and player? spells. can store variable info there and if owner dies who cares?

# event on successful cast? event if player saying no longer under effect of spell x for timed modifiers - use triggered event/on_action with delay=modifier duration

window = {
	name = "spellbook_interaction_window"
	datacontext = "[GetVariableSystem]"
	position = { 0 30 }
	parentanchor = center
	allow_outside = yes
	layer = middle

	visible = "[VariableSystem.Exists( 'spellbook_window' )]"

	using = Window_Size_CharacterList
	using = Window_Background
	using = Window_Decoration

	state = {
		name = _show
		#trigger_on_create = yes
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		on_start = "[GetVariableSystem.Clear('spell_county_list_open')]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	widget = {
		name = "province_list"
		visible = "[VariableSystem.Exists('spell_county_list_open')]"
		parentanchor = top|left
		position = { 730 80 }
		size = { 350 800 }
		#focuspolicy = click
		alwaystransparent = no

		using = Window_Background_Subwindow

		state = {
			name = _show
			using = Animation_FadeIn_Quick
			using = Sound_WindowShow_Standard
			position_x = 730
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
			using = Sound_WindowHide_Standard
			position_x = 670
		}

		vbox = {
			margin = { 4 4 }

			spacing = 10

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "SPELL_PROVINCE_SELECT"
				}
				blockoverride "button_close"
				{
					onclick = "[VariableSystem.Clear('spell_county_list_open')]"
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_empty"
				{
					text = NO_VALID_COUNTIES
					visible = "[IsDataModelEmpty(GetPlayer.MakeScope.GetList('spell_counties'))]" #blocked at the button, shouldn't see this
				}

				blockoverride "scrollbox_content" {
					vbox = {
						layoutpolicy_horizontal = expanding
						datamodel = "[GetPlayer.MakeScope.GetList('spell_counties')]"
						margin = { 15 15 }
						spacing = 8

						item = {
							button_standard_list = {
								name = "title_button"
								layoutpolicy_horizontal = expanding
								size = { 0 58 }
								onclick = "[GetScriptedGui('spell_province_pick').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('county', Scope.Title.MakeScope ).End)]"
								onclick = "[VariableSystem.Clear('spell_county_list_open')]"
								using = tooltip_es

								hbox = {
									margin = { 10 0 }
									spacing = 10

									coa_title_tiny_crown = {
										datacontext = "[Scope.Title]"
									}

									text_single = {
										name = "text"
										layoutpolicy_horizontal = expanding
										text = "[Scope.Title.GetName]"
										default_format = "#high"
										using = Font_Size_Medium
									}
								}
							}
						}
					}
				}
			}
		}
	}

	vbox = {
		using = Window_Margins
		#set_parent_size_to_minimum = yes

		header_standard = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "SPELLBOOK"
			}

			blockoverride "button_close"
			{
				#onclick = "[ExecuteConsoleCommand('GUI.ClearWidgets spellbook_interaction_window')]"
				onclick = "[GetVariableSystem.Clear( 'spellbook_window' )]"
				onclick = "[GetScriptedGui('spell_cleanup').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
				onclick = "[VariableSystem.Clear('spell_county_list_open')]"
			}
		}

		### Portrait / Info

		hbox = {
			name = "portraits_and_info"
			layoutpolicy_horizontal = expanding
			margin = { 10 5 }

			background = {
				using = Background_Area
			}

			widget = {
				size = { 110 120 }
				portrait_head = {
					datacontext = "[GetPlayer.MakeScope.Var('spell_caster').Char]"
					visible = "[Character.IsValid]"
				}

				button_round = {
					size = { 30 30 }
					name = "switch_caster"
					parentanchor = right
					onclick = "[GetScriptedGui('spell_switch_caster').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
					enabled = "[GetScriptedGui('spell_switch_caster').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
					raw_tooltip = "Переключить заклинателя"
					using = tooltip_ne

					button_change = {
						size = { 30 30 }
						alwaystransparent = yes
						parentanchor = center
					}
				}
			}

			text_multi = {
				size = { 250 0 }
				name = "info_text"
				multiline = yes
				autoresize = yes
				max_width = 250
				text = spell_casting_info
				align = center
				#using = Font_Size_Medium
			}

			widget = {
				size = { 110 120 }
				#visible = "[ObjectsEqual(GetPlayer.MakeScope.Var('spell_recipient').Char, GetPlayer)]"
				portrait_head = {
					datacontext = "[GetPlayer.MakeScope.Var('spell_recipient').Char]"
					visible = "[And(Character.IsValid, Not(ObjectsEqual(GetPlayer.MakeScope.Var('spell_recipient').Char, GetPlayer.MakeScope.Var('spell_caster').Char)))]"

					blockoverride "portrait_transformation"
					{
						portrait_scale = { -1 1 }
						portrait_offset = { 1 0 }
					}
				}
			}
		}

		hbox = {
			name = "tabs"
			layoutpolicy_horizontal = expanding
			margin = { 15 0 }

			button_tab_school = {
				name = "conjuration"
				blockoverride "school_tooltip" {
					tooltip = school_conjuration
				}
				blockoverride "school_context" {
					datacontext = "[GetScriptedGui('spell_school_conjuration')]"
				}
				blockoverride "school_bg_frame" {
					frame = 1
				}
				blockoverride "school_icon" {
					texture = "gfx/interface/spellbook_widget/school_conjuration.dds"
				}
			}

			button_tab_school = {
				name = "destruction"
				blockoverride "school_tooltip" {
					tooltip = school_destruction
				}
				blockoverride "school_context" {
					datacontext = "[GetScriptedGui('spell_school_destruction')]"
				}
				blockoverride "school_bg_frame" {
					frame = 3
				}
				blockoverride "school_icon" {
					texture = "gfx/interface/spellbook_widget/school_destruction.dds"
				}
			}

			button_tab_school = {
				name = "alteration"
				blockoverride "school_tooltip" {
					tooltip = school_alteration
				}
				blockoverride "school_context" {
					datacontext = "[GetScriptedGui('spell_school_alteration')]"
				}
				blockoverride "school_bg_frame" {
					frame = 5
				}
				blockoverride "school_icon" {
					texture = "gfx/interface/spellbook_widget/school_alteration.dds"
				}
			}

			button_tab_school = {
				name = "illusion"
				blockoverride "school_tooltip" {
					tooltip = school_illusion
				}
				blockoverride "school_context" {
					datacontext = "[GetScriptedGui('spell_school_illusion')]"
				}
				blockoverride "school_bg_frame" {
					frame = 2
				}
				blockoverride "school_icon" {
					texture = "gfx/interface/spellbook_widget/school_illusion.dds"
				}
			}

			button_tab_school = {
				name = "restoration"
				blockoverride "school_tooltip" {
					tooltip = school_restoration
				}
				blockoverride "school_context" {
					datacontext = "[GetScriptedGui('spell_school_restoration')]"
				}
				blockoverride "school_bg_frame" {
					frame = 4
				}
				blockoverride "school_icon" {
					texture = "gfx/interface/spellbook_widget/school_restoration.dds"
				}
			}

			button_tab_school = {
				name = "necromancy"
				blockoverride "school_tooltip" {
					tooltip = school_necromancy
				}
				blockoverride "school_context" {
					datacontext = "[GetScriptedGui('spell_school_necromancy')]"
				}
				blockoverride "school_bg_frame" {
					frame = 6
				}
				blockoverride "school_icon" {
					texture = "gfx/interface/spellbook_widget/school_necromancy.dds"
				}
			}
		}

		hbox = {
			name = "spell_lists"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 15 0 }

			scrollbox = {
				name = "spells_scrollbox"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				background = {
					texture = "gfx/interface/spellbook_widget/spell_school_tab_bg.dds"
					frame = "[FixedPointToInt(GetPlayer.MakeScope.ScriptValue('spell_school_bg'))]"
					framesize = { 140 70 }
					spriteType = Corneredstretched
					spriteborder = { 1 1 }
					alpha = 0.5

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
						blend_mode = alphamultiply
					}
					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_halfcircle.dds"
						blend_mode = alphamultiply
					}
				}

				blockoverride "scrollbox_replace_vbox"
				{
					vbox = {
						#layoutpolicy_horizontal = expanding
						margin = { 30 20 }
						margin_right = 35
						spacing = 0

						text_single = {
							default_format = "#low;italic"
							text = "NO_SPELLS"
							visible = "[IsDataModelEmpty(GetPlayer.MakeScope.GetList('spell_list'))]" # might not work, category never empty, use visible/not to create known/unknown spells IsShownTooltip could give how to learn, add brief description at start of tooltip
							#alternatively allow selection and block execution wiith cast button, enable replaced with greyout
						}

						vbox = {
							datamodel = "[GetPlayer.MakeScope.GetList('spell_list')]" #may be able to use variable list but not sure how to trigger specifiic effect
							layoutpolicy_horizontal = expanding
							spacing = 8

							item = {
								vbox = {
									datacontext = "[GetScriptedGui( 'spell_list_item' )]" #put the localize section in custom loc spell_$ID$
									layoutpolicy_horizontal = expanding
									button_standard = {
										layoutpolicy_horizontal = expanding
										size = { 0 40 }

										tooltip = "[ScriptedGui.IsShownTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'spell', MakeScopeFlag(Scope.GetFlagName) ).End)]"
										visible = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'spell', MakeScopeFlag(Scope.GetFlagName) ).End)]"
										onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'spell', MakeScopeFlag(Scope.GetFlagName) ).End)]"

										onclick = "[PdxGuiTriggerAllAnimations( SelectLocalization( EqualTo_CFixedPoint( EmptyScope.ScriptValue(Concatenate(Scope.GetFlagName, '_province')), '(CFixedPoint)1' ), Select_CString( EqualTo_CFixedPoint( EmptyScope.ScriptValue(Concatenate(Scope.GetFlagName, '_hostile')), '(CFixedPoint)1' ), 'province_select_show_hostile', 'province_select_show' ), 'province_select_hide' ) )]"

										down = "[EqualTo_string( GetPlayer.MakeScope.Var('spell_selected').GetFlagName, Scope.GetFlagName )]"

										widget = {
											name = "spell_valid"
											size = { 580 40 }
											visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'spell', MakeScopeFlag(Scope.GetFlagName) ).End)]"
											using = ButtonSpellList
											blockoverride "tint_greyout" {}
										}
										widget = {
											name = "spell_invalid"
											size = { 580 40 }
											visible = "[Not(ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'spell', MakeScopeFlag(Scope.GetFlagName) ).End))]"
											using = ButtonSpellList
											blockoverride "spell_font" {
												default_format = "#low"
											}
										}
									}
									button_standard = {
										layoutpolicy_horizontal = expanding
										size = { 0 40 }

										tooltip = "[ScriptedGui.IsValidTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'spell', MakeScopeFlag(Scope.GetFlagName) ).End)]"
										enabled = no
										visible = "[Not(ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'spell', MakeScopeFlag(Scope.GetFlagName) ).End))]"

										widget = {
											name = "spell_unkown"
											size = { 580 40 }
											using = ButtonSpellList
											blockoverride "spell_font" {
												default_format = "#low"
											}
										}
									}
								}
							}
						}
						expand = {
							layoutpolicy_vertical = growing
						}
					}
				}
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 0 10 }
			margin_bottom = 15
			spacing = 10

			vbox = {
				name = "effects"

				container = {
					scrollbox = {
						name = "effects_scrollarea"
						autoresizescrollarea = yes
						maximumsize = { -1 360 }
						#visible = "[InteractionEffectsDescription.HasAnyAcceptEffect]"

						blockoverride "scrollbox_content"
						{
							set_parent_size_to_minimum = yes

							block "minimumsize" {
								minimumsize = { 640 0 }
							}

							vbox = {
								name = "effects"
								layoutpolicy_horizontal = expanding
								spacing = 10

								### Me
								vbox = {
									name = "me"
									datacontext = "[GetPlayer.MakeScope.Var('spell_caster').Char]"
									#visible = "[InteractionEffectsDescription.HasActorAcceptEffect]"
									layoutpolicy_horizontal = expanding
									margin_bottom = 5

									background = {
										using = Background_Area_With_Header
									}

									text_single = {
										text = "EFFECTS_ON_ME"
										layoutpolicy_horizontal = expanding
										margin = { 15 4 }
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										margin_top = 5
										spacing = 5
										margin_left = 6

										portrait_head = {
											blockoverride "opinion_box"
											{}
										}

										text_multi = {
											name = "effects_info"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											autoresize = yes
											max_width = 475
											margin = { 5 10 }
											#text = "me effects"
											text = spell_caster_effect
										}

										expand = {}
									}
								}

								### Recipient
								vbox = {
									name = "recipient"
									datacontext = "[GetPlayer.MakeScope.Var('spell_recipient').Char]"
									#visible = "[InteractionEffectsDescription.HasRecipientAcceptEffect]"
									layoutpolicy_horizontal = expanding
									margin_bottom = 5

									background = {
										using = Background_Area_With_Header
									}

									text_single = {
										text = "EFFECTS_ON_ME"
										layoutpolicy_horizontal = expanding
										margin = { 15 4 }
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										margin_top = 5
										spacing = 5
										margin_left = 10
										margin_right = 6

										text_multi = {
											name = "effects_info"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											autoresize = yes
											max_width = 475
											margin = { 5 10 }
											#text = "them effect" #use custom loc here probably
											text = spell_castee_effect
										}

										expand = {}

										portrait_head = {
											#datacontext = "[InteractionEffectsDescription.GetRecipient]"
											blockoverride "opinion_box" {}
											blockoverride "portrait_transformation"
											{
												portrait_scale = { -1 1 }
												portrait_offset = { 1 0 }
											}
										}
									}
								}

								### Others -province armies etc.
								# vbox = {
								#     name = "other_effects"
								#     datacontext = "[GetPlayer.MakeScope.Var('spell_county').Char]"
								#     visible = "[InteractionEffectsDescription.HasRecipientAcceptEffect]"
								#     layoutpolicy_horizontal = expanding

								#     item = {
								#         hbox = {
								#             layoutpolicy_horizontal = expanding
								#             margin = { 0 5 }
								#             spacing = 10

								#             portrait_head = {
								#                 name = "portrait"
								#                 datacontext = "[InteractionOtherEffect.GetCharacter]"
								#                 visible = "[InteractionOtherEffect.HasCharacter]"
								#             }

								#             container = {
								#                 icon = {
								#                     position = { 16 0 }
								#                     size = { 50 50 }
								#                     texture = "gfx/interface/icons/icon_group_of_characters.dds"
								#                     visible = "[InteractionOtherEffect.IsList]"
								#                     tooltip = "[InteractionOtherEffect.GetListTooltip]"
								#                 }
								#             }

								#             text_multi = {
								#                 layoutpolicy_horizontal = expanding
								#                 layoutpolicy_vertical = expanding
								#                 autoresize = yes
								#                 max_width = 375
								#                 text = "[InteractionOtherEffect.GetEffect]"
								#                 align = left|vcenter
								#             }

								#             expand = {}
								#         }
								#     }
								# }
							}
						}
					}
				}
			}

			hbox = {
				name = "province_select"
				#flipdirection = yes
				size = { 0 30 }
				visible = "[EqualTo_CFixedPoint( EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('spell_selected').GetFlagName, '_province')), '(CFixedPoint)1' )]"
				#layoutpolicy_horizontal = growing
				allow_outside = yes

				state = {
					name = province_select_show
					on_start = "[GetScriptedGui( 'spell_select_province' ).Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
					on_start = "[GetVariableSystem.Clear('spell_county_list_open')]"
				}
				state = {
					name = province_select_show_hostile
					on_start = "[GetScriptedGui( 'spell_select_province_hostile' ).Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
					on_start = "[GetVariableSystem.Clear('spell_county_list_open')]"
				}

				state = {
					name = province_select_hide
					on_start = "[GetScriptedGui( 'spell_select_province_clear' ).Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
					on_start = "[GetVariableSystem.Clear('spell_county_list_open')]"
				}

				text_single = {
					align = nobaseline
					fontsize_min = 14
					text = selected_county
				}

				spacer = {
					size = { 15 0 }
				}

				button_standard = {
					name = "change_province"
					minimumsize = { 200 0 }

					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
					enabled = "[DataModelHasItems(GetPlayer.MakeScope.GetList('spell_counties'))]"
					onclick = "[VariableSystem.Toggle('spell_county_list_open')]"
					#tooltip = "change_county_target"

					text_single = {
						text = change_county_target
						parentanchor = left|vcenter
						align = nobaseline
						position = { 10 0 }
						fontsize_min = 14
					}

					button_change = {
						visible = "[VariableSystem.Exists('spell_county_list_open')]"
						parentanchor = right|vcenter
						position = { -5 0 }
						alwaystransparent = yes
						size = { 25 25 }
					}

					button_select_arrow = {
						visible = "[Not(VariableSystem.Exists('spell_county_list_open'))]"
						parentanchor = right|vcenter
						position = { -5 0 }
						alwaystransparent = yes
						size = { 25 25 }
					}
				}
			}

			hbox = {
				name = "skill_attribute_select_dropdown"
				visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('spell_skill_attribute'))]"
				size = { 0 30 }

				dropdown_menu_standard = {
					blockoverride "dropdown_properties"
					{
						datamodel = "[GetPlayer.MakeScope.GetList('spell_skill_attribute')]" #if these fail, can have sys var of selection and check for it changing in the active item section
						onselectionchanged = "[PdxGuiWidget.FindChild('active_skill_attribute').TriggerAnimation('select_skill_attribute')]" # in active_item. set var to string

						#selectedindex = "[BattleSummaryWindow.GetSoldiersSortIndex]" #uses CVector2i. no go
					}
					blockoverride "dropdown_active_item_properties"
					{
						name = "active_skill_attribute"
						text = "[Localize( Concatenate( 'game_concept', GetPlayer.MakeScope.Var('spell_selected_skill_attribute').GetFlagName ) )]"

						state = {
							name = "select_skill_attribute"
							on_start = "[GetScriptedGui('spell_select_skill_attribute').Execute( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('skill_attribute', MakeScopeFlag(Scope.GetFlagName) ).End) )]"
						}
					}
					blockoverride "dropdown_item_properties"
					{
						text = "[Localize( Concatenate( 'game_concept', Scope.GetFlagName ) )]"
					}
					blockoverride "dropdown_list_properties"
					{
						position = { 5 -2 }
						widgetanchor = bottom
					}
				}
			}

			hbox = {
				name = "size_select_dropdown"
				visible = "[DataModelHasItems(GetPlayer.MakeScope.GetList('spell_size'))]"
				size = { 0 30 }

				dropdown_menu_standard = {
					blockoverride "dropdown_properties"
					{
						datamodel = "[GetPlayer.MakeScope.GetList('spell_size')]" #if these fail, can have sys var of selection and check for it changing in the active item section
						onselectionchanged = "[PdxGuiWidget.FindChild('active_size').TriggerAnimation('select_size')]" # in active_item. set var to string

						#selectedindex = "[BattleSummaryWindow.GetSoldiersSortIndex]" #uses CVector2i. no go
					}
					blockoverride "dropdown_active_item_properties"
					{
						name = "active_size"
						text = "[Localize( Concatenate( 'game_concept', GetPlayer.MakeScope.Var('spell_selected_size').GetFlagName ) )]"

						state = {
							name = "select_size"
							on_start = "[GetScriptedGui('spell_select_size').Execute( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('size', MakeScopeFlag(Scope.GetFlagName) ).End) )]"
						}
					}
					blockoverride "dropdown_item_properties"
					{
						text = "[Localize( Concatenate( 'game_concept', Scope.GetFlagName ) )]"
					}
					blockoverride "dropdown_list_properties"
					{
						position = { 5 -2 }
						widgetanchor = bottom
					}
				}
			}

			### Send Button
			button_primary = {
				name = "send_offer_button"
				size = { 400 42 }

				datacontext = "[GetScriptedGui( 'spell_cast_confirm' )]"
				enabled = "[And(Not(EqualTo_string( GetPlayer.MakeScope.Var('spell_selected').GetFlagName, 'no_spell' )), ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'spell', MakeScopeFlag(GetPlayer.MakeScope.Var('spell_selected').GetFlagName) ).End))]"
				tooltip = "[Select_CString( EqualTo_string( GetPlayer.MakeScope.Var('spell_selected').GetFlagName, 'no_spell' ), '', ScriptedGui.IsShownTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'spell', MakeScopeFlag(GetPlayer.MakeScope.Var('spell_selected').GetFlagName) ).End))]"
				onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope( 'spell', MakeScopeFlag(GetPlayer.MakeScope.Var('spell_selected').GetFlagName) ).End)]"

				#onclick = "[ExecuteConsoleCommand('GUI.ClearWidgets spellbook_interaction_window')]"
				onclick = "[GetVariableSystem.Clear( 'spellbook_window' )]"
				onclick = "[GetScriptedGui('spell_cleanup').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

				onclick = "[VariableSystem.Clear('spell_county_list_open')]"

				text = spell_confirm
				using = Font_Size_Medium
			}
		}
	}
}

window = {
	name = "spellbook_ritual_window"
	datacontext = "[GetVariableSystem]"
	position = { 0 -18 }
	parentanchor = center
	allow_outside = yes
	layer = middle

	visible = "[VariableSystem.Exists( 'ritual_window' )]"

	size = { 1350 670 }
	#size = { 1100 88% } #or 920 instead if different resolutions look weird
	#using = Window_Size_CharacterList
	using = Window_Background
	using = Window_Decoration_Spike

	state = {
		name = _show
		#trigger_on_create = yes
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		on_start = "[GetVariableSystem.Set('ritual_school', 'conjuration')]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	vbox = {
		using = Window_Margins
		#set_parent_size_to_minimum = yes

		header_standard = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "RITUAL"
			}

			blockoverride "button_close"
			{
				#onclick = "[ExecuteConsoleCommand('GUI.ClearWidgets spellbook_ritual_window')]"
				onclick = "[VariableSystem.Clear( 'ritual_window' )]"
				onclick = "[GetScriptedGui('ritual_cleanup').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 25 10 }

			background = {
				using = Background_Area
			}

			widget = {
				layoutpolicy_horizontal = expanding
				size = { 100% 40 }

				text_label_left = {
					text = RITUAL_SLOTS
					parentanchor = left|vcenter
					using = tooltip_below
					tooltipwidget = {
						widget = {
							alwaystransparent = no
							using = GeneralTooltipSetup
							widget = {
								name = "background"
								using = DefaultTooltipBackground
								size = { 100% 100% }
								alwaystransparent = no
							}
							vbox = {
								set_parent_size_to_minimum = yes
								margin = { 20 10 }
								margin_bottom = 20
								spacing = 3

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "slot_title"
									align = left
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									# margin = { 0 4 }
									spacing = -1

									datacontext = "[GetScriptedGui('ritual_slot_breakdown')]"

									# Breakdown in common/scripted_guis/magic_scripted_gui.txt
									text_single = {
										layoutpolicy_horizontal = expanding
										text = "slot_base"
										align = left
									}
									text_single = {
										visible = "[GreaterThan_CFixedPoint( GetPlayer.MakeScope.ScriptValue('ritual_slots_arcana'), '(CFixedPoint)0' )]"
										layoutpolicy_horizontal = expanding
										text = "slot_arcana"
										align = left
									}
									text_single = {
										visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('check', MakeScopeFlag('edu_2') ).End )]"
										layoutpolicy_horizontal = expanding
										text = "slot_education_2"
										align = left
									}
									text_single = {
										visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('check', MakeScopeFlag('edu_3') ).End )]"
										layoutpolicy_horizontal = expanding
										text = "slot_education_3"
										align = left
									}
									text_single = {
										visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('check', MakeScopeFlag('edu_4') ).End )]"
										layoutpolicy_horizontal = expanding
										text = "slot_education_4"
										align = left
									}
									text_single = {
										visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('check', MakeScopeFlag('legacy') ).End )]"
										layoutpolicy_horizontal = expanding
										text = "slot_legacy"
										align = left
									}
									text_single = {
										visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('check', MakeScopeFlag('court_type') ).End )]"
										layoutpolicy_horizontal = expanding
										text = "slot_court_type"
										align = left
									}
								}
							}
						}
					}
				}
				text_label_center = {
					text = RITUAL_PERM
					parentanchor = hcenter
					using = Font_Type_Flavor
					using = Font_Size_Big
				}
				text_label_right = {
					text = RITUAL_UPKEEP
					tooltip = UPKEEP_TT
					using = tooltip_below
					parentanchor = right|vcenter
				}
			}
		}

		widget = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			# widget = {
				# layoutpolicy_horizontal = expanding
				# size = { 100% 220 }

				# parentanchor = bottom|hcenter
				# widgetanchor = bottom|hcenter

				# vbox = {
					# layoutpolicy_horizontal = expanding
					# margin = { 25 10 }
					# spacing = 5

					# #visible = "[GetPlayer.MakeScope.Var('grand_ritual').IsSet]"

					# background = {
						# using = Background_Area
					# }

					# hbox = {
						# layoutpolicy_horizontal = expanding
						# widget = {
							# layoutpolicy_horizontal = expanding
							# size = { 100% 40 }

							# widget = {
								# visible = "[GetPlayer.MakeScope.Var('grand_ritual').IsSet]"
								# using = Animation_Grand_Ritual_Refresh
								# size = { 30% 100% }
								# container = {
									# visible = "[GetPlayer.MakeScope.Var('grand_ritual_complete').IsSet]"
									# tooltip = "[Localize('GRAND_RITUAL_START')]: [GetCurrentDateWithDiffLong( Subtract_int32( GetVarTimeRemaining( GetPlayer.MakeScope, 'grand_ritual_complete'), FixedPointToInt(EmptyScope.ScriptValue(Concatenate( GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'time' ))) ) )]"

									# text_label_left = {
										# visible = "[GreaterThanOrEqualTo_int32( GetProgressBarValueMaxScaled( IntToFloat(GetVarTimeRemaining( GetPlayer.MakeScope, 'grand_ritual_complete')), '(float)365', '(int32)1' ), '(int32)1' )]"
										# text = "[Localize('GRAND_RITUAL_TIME')]: ~[GetProgressBarValueMaxScaled( IntToFloat(GetVarTimeRemaining( GetPlayer.MakeScope, 'grand_ritual_complete')), '(float)365', '(int32)1' )|V] [Localize('GRAND_RITUAL_YEARS')]"
										# parentanchor = left
									# }
									# text_label_left = {
										# visible = "[LessThan_int32( GetProgressBarValueMaxScaled( IntToFloat(GetVarTimeRemaining( GetPlayer.MakeScope, 'grand_ritual_complete')), '(float)365', '(int32)1' ), '(int32)1' )]"
										# text = "[Localize('GRAND_RITUAL_TIME')]: ~[GetProgressBarValueMaxScaled( IntToFloat(GetVarTimeRemaining( GetPlayer.MakeScope, 'grand_ritual_complete')), '(float)30', '(int32)1'  )|V] [Localize('GRAND_RITUAL_MONTHS')]"
										# parentanchor = left
									# }
								# }
								# container = {
									# visible = "[Not(GetPlayer.MakeScope.Var('grand_ritual_complete').IsSet)]"
									# text_label_left = {
										# visible = "[GreaterThanOrEqualTo_int32( GetProgressBarValueMaxScaled( FixedPointToFloat(EmptyScope.ScriptValue(Concatenate( GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'time' ))), '(float)365', '(int32)1' ), '(int32)1' )]"
										# text = "[Localize('GRAND_RITUAL_TIME')]: ~[GetProgressBarValueMaxScaled( FixedPointToFloat(EmptyScope.ScriptValue(Concatenate( GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'time' ))), '(float)365', '(int32)1' )|V] [Localize('GRAND_RITUAL_YEARS')]"
										# parentanchor = left
									# }
									# text_label_left = {
										# visible = "[LessThan_int32( GetProgressBarValueMaxScaled( FixedPointToFloat(EmptyScope.ScriptValue(Concatenate( GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'time' ))), '(float)365', '(int32)1' ), '(int32)1' )]"
										# text = "[Localize('GRAND_RITUAL_TIME')]: ~[GetProgressBarValueMaxScaled( FixedPointToFloat(EmptyScope.ScriptValue(Concatenate( GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'time' ))), '(float)30', '(int32)1'  )|V] [Localize('GRAND_RITUAL_MONTHS')]"
										# parentanchor = left
									# }
								# }
							# }

							# flowcontainer = {
								# parentanchor = hcenter
								# ignoreinvisible = yes

								# background = {
									# margin_left = 40
									# margin_right = 40
									# # alpha = 0.5

									# texture = "gfx/interface/component_tiles/tile_title_bg_01.dds"
									# spriteType = Corneredtiled
									# spriteborder = { 40 8 }
									# texture_density = 2

									# modify_texture = {
										# name = "mask"
										# texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
										# spriteType = Corneredstretched
										# spriteborder = { 0 0 }
										# blend_mode = alphamultiply
									# }
								# }

								# text_single = {
									# text = GRAND_RITUAL_NAME
									# size = { 0 40 }
									# #parentanchor = hcenter
									# using = Font_Type_Flavor
									# using = Font_Size_Big
								# }

								# dropDown = {
									# datamodel = "[GetPlayer.MakeScope.GetList('grand_rituals')]"
									# datacontext = "[GetScriptedGui('grand_rituals')]"

									# onselectionchanged = "[PdxGuiWidget.FindChild('grand_ritual_button').TriggerAnimation('ritual_select_drop')]" # in active_item. set var to string
									# onselectionchanged = "[PdxGuiTriggerAllAnimations('grand_ritual_refresh')]"

									# size = { 200 40 }

									# active_item = {
										# container = {
											# alwaystransparent = no

											# enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('ritual', MakeScopeFlag(Scope.GetFlagName) ).End )]"

											# button_drop = {
												# name = "grand_ritual_button"
												# size = { 200 40 }

												# button_trigger = none
												# spriteType = Corneredstretched
												# spriteborder = { 0 0 }

												# state = {
													# name = "ritual_select_drop"
													# on_start = "[ScriptedGui.Execute( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('ritual', MakeScopeFlag(Scope.GetFlagName) ).End )]"
												# }

												# text_single = {
													# visible = "[GetPlayer.MakeScope.Var('grand_ritual').IsSet]"
													# size = { 100% 100% }
													# margin = { 15 0 }
													# margin_right = 25
													# text = "[Localize(Concatenate( GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'name' ))]"
													# using = Font_Type_Flavor
													# using = Font_Size_Big
													# default_format = "#clickable"
												# }
												# text_single = {
													# visible = "[Not(GetPlayer.MakeScope.Var('grand_ritual').IsSet)]"
													# size = { 100% 100% }
													# margin = { 15 0 }
													# margin_right = 25
													# raw_text = "-No Selection-"
													# using = Font_Type_Flavor
													# using = Font_Size_Big
													# default_format = "#clickable"
												# }
											# }
										# }
									# }

									# item = {
										# container = {
											# alwaystransparent = no

											# visible = "[And( ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('ritual', MakeScopeFlag(Scope.GetFlagName) ).End ), ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('ritual', MakeScopeFlag(Scope.GetFlagName) ).End ) )]"

											# button_dropdown = {
												# size = { 200 32 }
												# button_trigger = none
												# text = "[Localize(Concatenate( Scope.GetFlagName, 'name' ))]"
												# default_format = "#clickable"
											# }
										# }
									# }

									# list = {
										# scrollarea = {
											# position = { 5 40 }
											# maximumsize = { 192 250 }

											# autoresizescrollarea = yes
											# scrollbarpolicy_horizontal = always_off

											# using = Background_DropDown

											# scrollwidget = {
												# dynamicgridbox = {
													# alwaystransparent = no
													# ignoreinvisible = yes
												# }
											# }

											# scrollbar_vertical = {
												# using = Scrollbar_Vertical
											# }
										# }
									# }
								# }

								# watch_window_button = {
									# size = { 60 40 }
									# visible = "[And(WatchWindowsEnabled, GetPlayer.MakeScope.Var('grand_ritual_story').IsSet)]"
									# onclick = "[AddWatchWindow( GetPlayer.MakeScope.Var('grand_ritual_story').Story.MakeScope )]"
								# }
							# }

							# text_label_right = {
								# visible = "[GetPlayer.MakeScope.Var('grand_ritual').IsSet]"
								# using = Animation_Grand_Ritual_Refresh
								# text = "[Localize('GRAND_RITUAL_COST')]: [EmptyScope.ScriptValue(Concatenate( GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'upkeep' ))|+=0]"
								# parentanchor = right
							# }
						# }
					# }

					# hbox = {
						# visible = "[Not(GetPlayer.MakeScope.Var('grand_ritual').IsSet)]"
						# using = Animation_Grand_Ritual_Refresh
						# maximumsize = { 880 110 }
						# minimumsize = { 880 110 }
						# #position = { 0 30 }
						# layoutpolicy_horizontal = expanding

						# background = {
							# using = Background_Area
						# }
					# }

					# hbox = {
						# visible = "[GetPlayer.MakeScope.Var('grand_ritual').IsSet]"
						# using = Animation_Grand_Ritual_Refresh
						# maximumsize = { 880 110 }
						# minimumsize = { 880 110 }
						# #position = { 0 30 }
						# layoutpolicy_horizontal = expanding

						# background = { #use scripted illustration to check var ritual selected
							# texture = "gfx/interface/illustrations/legacy_tracks/erudition_legacy_track.dds"
							# framesize = { 2944 368 }
							# frame = 1

							# modify_texture = {
								# texture = "gfx/interface/component_tiles/tile_frame_thin_02.dds"
								# spriteType = Corneredtiled
								# spriteborder = { 50 50 }
								# blend_mode = alphamultiply
								# texture_density = 2
							# }

							# modify_texture = {
								# texture = "gfx/interface/component_masks/mask_legacy_track.dds"
								# spriteType = Corneredtiled
								# spriteborder = { 50 50 }
								# blend_mode = alphamultiply
							# }
						# }

						# ritual_stage_widget = {
							# visible = "[GreaterThanOrEqualTo_CFixedPoint( EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stages')), '(CFixedPoint)1' )]"
							# #datacontext = "[GuiScope.SetRoot(MakeScopeFlag('stage_1')).GetRootScope]"
							# blockoverride "ritual_stage_shown" {
								# visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_1')) ).End )]"
							# }
							# blockoverride "ritual_stage_valid" {
								# visible = "[ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_1')) ).End )]"
							# }
							# blockoverride "ritual_stage_not_valid" {
								# visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_1')) ).End ))]"
							# }
							# blockoverride "ritual_stage_name" {
								# text = "[Localize(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stage_1'))]"
							# }
							# blockoverride "ritual_stage_tooltip" {
								# tooltip = "[Localize(Concatenate(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stage_1'), '_desc' ))]"
							# }
						# }
						# ritual_stage_widget = {
							# visible = "[GreaterThanOrEqualTo_CFixedPoint( EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stages')), '(CFixedPoint)2' )]"
							# #datacontext = "[GuiScope.SetRoot(MakeScopeFlag('stage_2')).GetRootScope]"
							# blockoverride "ritual_stage_shown" {
								# visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_2')) ).End )]"
							# }
							# blockoverride "ritual_stage_valid" {
								# visible = "[ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_2')) ).End )]"
							# }
							# blockoverride "ritual_stage_not_valid" {
								# visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_2')) ).End ))]"
							# }
							# blockoverride "ritual_stage_name" {
								# text = "[Localize(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stage_2'))]"
							# }
							# blockoverride "ritual_stage_tooltip" {
								# tooltip = "[Localize(Concatenate(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stage_2'), '_desc' ))]"
							# }
						# }
						# ritual_stage_widget = {
							# visible = "[GreaterThanOrEqualTo_CFixedPoint( EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stages')), '(CFixedPoint)3' )]"
							# #datacontext = "[GuiScope.SetRoot(MakeScopeFlag('stage_3')).GetRootScope]"
							# blockoverride "ritual_stage_shown" {
								# visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_3')) ).End )]"
							# }
							# blockoverride "ritual_stage_valid" {
								# visible = "[ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_3')) ).End )]"
							# }
							# blockoverride "ritual_stage_not_valid" {
								# visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_3')) ).End ))]"
							# }
							# blockoverride "ritual_stage_name" {
								# text = "[Localize(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stage_3'))]"
							# }
							# blockoverride "ritual_stage_tooltip" {
								# tooltip = "[Localize(Concatenate(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stage_3'), '_desc' ))]"
							# }
						# }
						# ritual_stage_widget = {
							# visible = "[GreaterThanOrEqualTo_CFixedPoint( EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stages')), '(CFixedPoint)4' )]"
							# #datacontext = "[GuiScope.SetRoot(MakeScopeFlag('stage_4')).GetRootScope]"
							# blockoverride "ritual_stage_shown" {
								# visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_4')) ).End )]"
							# }
							# blockoverride "ritual_stage_valid" {
								# visible = "[ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_4')) ).End )]"
							# }
							# blockoverride "ritual_stage_not_valid" {
								# visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_4')) ).End ))]"
							# }
							# blockoverride "ritual_stage_name" {
								# text = "[Localize(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stage_4'))]"
							# }
							# blockoverride "ritual_stage_tooltip" {
								# tooltip = "[Localize(Concatenate(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stage_4'), '_desc' ))]"
							# }
						# }
						# ritual_stage_widget = {
							# visible = "[GreaterThanOrEqualTo_CFixedPoint( EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stages')), '(CFixedPoint)5' )]"
							# #datacontext = "[GuiScope.SetRoot(MakeScopeFlag('stage_5')).GetRootScope]"
							# blockoverride "ritual_stage_shown" {
								# visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_5')) ).End )]"
							# }
							# blockoverride "ritual_stage_valid" {
								# visible = "[ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_5')) ).End )]"
							# }
							# blockoverride "ritual_stage_not_valid" {
								# visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue('stage_5')) ).End ))]"
							# }
							# blockoverride "ritual_stage_name" {
								# text = "[Localize(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stage_5'))]"
							# }
							# blockoverride "ritual_stage_tooltip" {
								# tooltip = "[Localize(Concatenate(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, 'stage_5'), '_desc' ))]"
							# }
						# }
					# }

					# button_primary = {
						# size = { 400 42 }

						# text = GRAND_RITUAL_INIT
						# using = Font_Size_Medium

						# datacontext = "[GetScriptedGui('grand_ritual_init_story')]"
						# enabled = "[ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).End )]"
						# onclick = "[ScriptedGui.Execute( GuiScope.SetRoot(GetPlayer.MakeScope).End )]"

						# tooltip = "[ScriptedGui.IsValidTooltip( GuiScope.SetRoot(GetPlayer.MakeScope).End )]"
					# }
				# }
			# }
			

			widget = {
				size = { 1250 480 }
				position = { 0 5 }
				allow_outside = yes

				parentanchor = top|hcenter
				widgetanchor = top|hcenter

				hbox = {
					layoutpolicy_horizontal = expanding
					#layoutpolicy_vertical = growing
					ignoreinvisible = no
					allow_outside = yes
					position = { 0 180 }

					ritual_widget = {
						#visible = "[GreaterThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('ritual_slot_limit'), '(CFixedPoint)7' )]"

						blockoverride "ritual_button_var" {
							visible = "[VariableSystem.Exists('ritual_button_7_open')]"
						}
						blockoverride "ritual_scripted_gui" {
							datacontext = "[GetScriptedGui('ritual_slot_7')]"
						}
						blockoverride "var_scope" {
							visible = "[GetPlayer.MakeScope.Var('ritual_slot_7').IsSet]"
							datacontext = "[GetModifier(Concatenate('modifier_ritual_', GetPlayer.MakeScope.Var('ritual_slot_7').GetFlagName))]"
						}
						blockoverride "school_frame" {
							frame = "[FixedPointToInt(EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_7').GetFlagName, '_school')))]"
						}
						blockoverride "ritual_cost" {
							text = "[magicka_i][EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_7').GetFlagName, '_upkeep'))|+=1]"
						}
						blockoverride "empty_visible" {
							visible = "[Not(GetPlayer.MakeScope.Var('ritual_slot_7').IsSet)]"
						}
						blockoverride "ritual_button_var_set" {
							on_start = "[GetVariableSystem.Set('ritual_button_7_open','true')]"
						}
						blockoverride "ritual_button_var_clear" {
							on_start = "[GetVariableSystem.Clear('ritual_button_7_open')]"
						}
					}
					ritual_widget = {
						#visible = "[GreaterThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('ritual_slot_limit'), '(CFixedPoint)8' )]"

						blockoverride "ritual_button_var" {
							visible = "[VariableSystem.Exists('ritual_button_8_open')]"
						}
						blockoverride "ritual_scripted_gui" {
							datacontext = "[GetScriptedGui('ritual_slot_8')]"
						}
						blockoverride "var_scope" {
							visible = "[GetPlayer.MakeScope.Var('ritual_slot_8').IsSet]"
							datacontext = "[GetModifier(Concatenate('modifier_ritual_', GetPlayer.MakeScope.Var('ritual_slot_8').GetFlagName))]"
						}
						blockoverride "school_frame" {
							frame = "[FixedPointToInt(EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_8').GetFlagName, '_school')))]"
						}
						blockoverride "ritual_cost" {
							text = "[magicka_i][EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_8').GetFlagName, '_upkeep'))|+=1]"
						}
						blockoverride "empty_visible" {
							visible = "[Not(GetPlayer.MakeScope.Var('ritual_slot_8').IsSet)]"
						}
						blockoverride "ritual_button_var_set" {
							on_start = "[GetVariableSystem.Set('ritual_button_8_open','true')]"
						}
						blockoverride "ritual_button_var_clear" {
							on_start = "[GetVariableSystem.Clear('ritual_button_8_open')]"
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					#layoutpolicy_vertical = growing
					ignoreinvisible = no
					allow_outside = yes
					position = { 0 60 }

					ritual_widget = {
						#visible = "[GreaterThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('ritual_slot_limit'), '(CFixedPoint)5' )]"

						blockoverride "ritual_button_var" {
							visible = "[VariableSystem.Exists('ritual_button_5_open')]"
						}
						blockoverride "ritual_scripted_gui" {
							datacontext = "[GetScriptedGui('ritual_slot_5')]"
						}
						blockoverride "var_scope" {
							visible = "[GetPlayer.MakeScope.Var('ritual_slot_5').IsSet]"
							datacontext = "[GetModifier(Concatenate('modifier_ritual_', GetPlayer.MakeScope.Var('ritual_slot_5').GetFlagName))]"
						}
						blockoverride "school_frame" {
							frame = "[FixedPointToInt(EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_5').GetFlagName, '_school')))]"
						}
						blockoverride "ritual_cost" {
							text = "[magicka_i][EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_5').GetFlagName, '_upkeep'))|+=1]"
						}
						blockoverride "empty_visible" {
							visible = "[Not(GetPlayer.MakeScope.Var('ritual_slot_5').IsSet)]"
						}
						blockoverride "ritual_button_var_set" {
							on_start = "[GetVariableSystem.Set('ritual_button_5_open','true')]"
						}
						blockoverride "ritual_button_var_clear" {
							on_start = "[GetVariableSystem.Clear('ritual_button_5_open')]"
						}
					}
					ritual_widget = {
						#visible = "[GreaterThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('ritual_slot_limit'), '(CFixedPoint)6' )]"

						blockoverride "ritual_button_var" {
							visible = "[VariableSystem.Exists('ritual_button_6_open')]"
						}
						blockoverride "ritual_scripted_gui" {
							datacontext = "[GetScriptedGui('ritual_slot_6')]"
						}
						blockoverride "var_scope" {
							visible = "[GetPlayer.MakeScope.Var('ritual_slot_6').IsSet]"
							datacontext = "[GetModifier(Concatenate('modifier_ritual_', GetPlayer.MakeScope.Var('ritual_slot_6').GetFlagName))]"
						}
						blockoverride "school_frame" {
							frame = "[FixedPointToInt(EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_6').GetFlagName, '_school')))]"
						}
						blockoverride "ritual_cost" {
							text = "[magicka_i][EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_6').GetFlagName, '_upkeep'))|+=1]"
						}
						blockoverride "empty_visible" {
							visible = "[Not(GetPlayer.MakeScope.Var('ritual_slot_6').IsSet)]"
						}
						blockoverride "ritual_button_var_set" {
							on_start = "[GetVariableSystem.Set('ritual_button_6_open','true')]"
						}
						blockoverride "ritual_button_var_clear" {
							on_start = "[GetVariableSystem.Clear('ritual_button_6_open')]"
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					#layoutpolicy_vertical = growing
					ignoreinvisible = no
					allow_outside = yes
					position = { 0 -60 }

					ritual_widget = {
						#visible = "[GreaterThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('ritual_slot_limit'), '(CFixedPoint)3' )]"

						blockoverride "ritual_button_var" {
							visible = "[VariableSystem.Exists('ritual_button_3_open')]"
						}
						blockoverride "ritual_scripted_gui" {
							datacontext = "[GetScriptedGui('ritual_slot_3')]"
						}
						blockoverride "var_scope" {
							visible = "[GetPlayer.MakeScope.Var('ritual_slot_3').IsSet]"
							datacontext = "[GetModifier(Concatenate('modifier_ritual_', GetPlayer.MakeScope.Var('ritual_slot_3').GetFlagName))]"
						}
						blockoverride "school_frame" {
							frame = "[FixedPointToInt(EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_3').GetFlagName, '_school')))]"
						}
						blockoverride "ritual_cost" {
							text = "[magicka_i][EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_3').GetFlagName, '_upkeep'))|+=1]"
						}
						blockoverride "empty_visible" {
							visible = "[Not(GetPlayer.MakeScope.Var('ritual_slot_3').IsSet)]"
						}
						blockoverride "ritual_button_var_set" {
							on_start = "[GetVariableSystem.Set('ritual_button_3_open','true')]"
						}
						blockoverride "ritual_button_var_clear" {
							on_start = "[GetVariableSystem.Clear('ritual_button_3_open')]"
						}
					}
					ritual_widget = {
						#visible = "[GreaterThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('ritual_slot_limit'), '(CFixedPoint)4' )]"

						blockoverride "ritual_button_var" {
							visible = "[VariableSystem.Exists('ritual_button_4_open')]"
						}
						blockoverride "ritual_scripted_gui" {
							datacontext = "[GetScriptedGui('ritual_slot_4')]"
						}
						blockoverride "var_scope" {
							visible = "[GetPlayer.MakeScope.Var('ritual_slot_4').IsSet]"
							datacontext = "[GetModifier(Concatenate('modifier_ritual_', GetPlayer.MakeScope.Var('ritual_slot_4').GetFlagName))]"
						}
						blockoverride "school_frame" {
							frame = "[FixedPointToInt(EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_4').GetFlagName, '_school')))]"
						}
						blockoverride "ritual_cost" {
							text = "[magicka_i][EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_4').GetFlagName, '_upkeep'))|+=1]"
						}
						blockoverride "empty_visible" {
							visible = "[Not(GetPlayer.MakeScope.Var('ritual_slot_4').IsSet)]"
						}
						blockoverride "ritual_button_var_set" {
							on_start = "[GetVariableSystem.Set('ritual_button_4_open','true')]"
						}
						blockoverride "ritual_button_var_clear" {
							on_start = "[GetVariableSystem.Clear('ritual_button_4_open')]"
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					#layoutpolicy_vertical = growing
					ignoreinvisible = no
					allow_outside = yes
					position = { 0 -180 }

					ritual_widget = {
						blockoverride "ritual_button_var" {
							visible = "[VariableSystem.Exists('ritual_button_1_open')]"
						}
						blockoverride "ritual_scripted_gui" {
							datacontext = "[GetScriptedGui('ritual_slot_1')]"
						}
						blockoverride "var_scope" {
							visible = "[GetPlayer.MakeScope.Var('ritual_slot_1').IsSet]"
							datacontext = "[GetModifier(Concatenate('modifier_ritual_', GetPlayer.MakeScope.Var('ritual_slot_1').GetFlagName))]"
						}
						blockoverride "school_frame" {
							frame = "[FixedPointToInt(EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_1').GetFlagName, '_school')))]"
						}
						blockoverride "ritual_cost" {
							text = "[magicka_i][EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_1').GetFlagName, '_upkeep'))|+=1]"
						}
						blockoverride "empty_visible" {
							visible = "[Not(GetPlayer.MakeScope.Var('ritual_slot_1').IsSet)]"
						}
						blockoverride "ritual_button_var_set" {
							on_start = "[GetVariableSystem.Set('ritual_button_1_open','true')]"
						}
						blockoverride "ritual_button_var_clear" {
							on_start = "[GetVariableSystem.Clear('ritual_button_1_open')]"
						}
					}
					ritual_widget = {
						#visible = "[GreaterThanOrEqualTo_CFixedPoint( GetPlayer.MakeScope.ScriptValue('ritual_slot_limit'), '(CFixedPoint)2' )]"

						blockoverride "ritual_button_var" {
							visible = "[VariableSystem.Exists('ritual_button_2_open')]"
						}
						blockoverride "ritual_scripted_gui" {
							datacontext = "[GetScriptedGui('ritual_slot_2')]"
						}
						blockoverride "var_scope" {
							visible = "[GetPlayer.MakeScope.Var('ritual_slot_2').IsSet]"
							datacontext = "[GetModifier(Concatenate('modifier_ritual_', GetPlayer.MakeScope.Var('ritual_slot_2').GetFlagName))]"
						}
						blockoverride "school_frame" {
							frame = "[FixedPointToInt(EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_2').GetFlagName, '_school')))]"
						}
						blockoverride "ritual_cost" {
							text = "[magicka_i][EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_2').GetFlagName, '_upkeep'))|+=1]"
						}
						blockoverride "empty_visible" {
							visible = "[Not(GetPlayer.MakeScope.Var('ritual_slot_2').IsSet)]"
						}
						blockoverride "ritual_button_var_set" {
							on_start = "[GetVariableSystem.Set('ritual_button_2_open','true')]"
						}
						blockoverride "ritual_button_var_clear" {
							on_start = "[GetVariableSystem.Clear('ritual_button_2_open')]"
						}
					}
				}
				expand = {}
			}
		}
	}
}

Types Spells
{
	Type button_tab_school = button_tab {
		size = { 0 70 }
		layoutpolicy_horizontal = expanding

		block "school_tooltip" {
			tooltip = school_alteration
		}
		block "school_context" {
			datacontext = "[GetScriptedGui('spell_school_alteration')]"
		}
		down = "[Not(ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
		onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
		onclick = "[VariableSystem.Clear('spell_county_list_open')]"

		background = {
			texture = "gfx/interface/spellbook_widget/spell_school_tab_bg.dds"
			block "school_bg_frame" {
				frame = 5
			}
			framesize = { 140 70 }
			margin = { 0 0 }
			margin_bottom = 5
		}

		highlight_icon = {
			size = { 64 64 }
			parentanchor = center
			alwaystransparent = yes
			block "school_icon" {
				texture = "gfx/interface/spellbook_widget/school_alteration.dds"
			}
		}

		using = tooltip_above
	}

	Type ritual_widget = widget {
		size = { 450 120 }
		allow_outside = yes

		block "ritual_scripted_gui" {
			datacontext = "[GetScriptedGui('ritual_slot_1')]"
		}

		hbox = {
			name = "tabs"
			maximumsize = { 450 52 }
			layoutpolicy_horizontal = expanding
			margin = { 5 0 }

			background = {
				using = Background_Area_Solid
				margin = { -5 0 }
			}
			block "ritual_button_var" {
				visible = "[VariableSystem.Exists('ritual_button_1_open')]"
			}

			state = {
				name = _show
				position_y = 113
				#on_start = "[VariableSystem.Set('ritual_school', 'conjuration')]"
			}

			button_tab = {
				size = { 0 52 }
				layoutpolicy_horizontal = expanding

				tooltip = school_conjuration
				down = "[VariableSystem.HasValue('ritual_school', 'conjuration')]"
				onmousehierarchyenter = "[VariableSystem.Set('ritual_school', 'conjuration')]"

				background = {
					texture = "gfx/interface/spellbook_widget/spell_school_tab_bg.dds"
					frame = 1
					framesize = { 140 70 }
					margin = { 0 0 }
					margin_bottom = 3
				}

				highlight_icon = {
					size = { 48 48 }
					position = { 0 2 }
					parentanchor = center
					alwaystransparent = yes
					texture = "gfx/interface/spellbook_widget/school_conjuration.dds"
				}

				using = tooltip_above
			}
			button_tab = {
				size = { 0 52 }
				layoutpolicy_horizontal = expanding

				tooltip = school_destruction
				down = "[VariableSystem.HasValue('ritual_school', 'destruction')]"
				onmousehierarchyenter = "[VariableSystem.Set('ritual_school', 'destruction')]"

				background = {
					texture = "gfx/interface/spellbook_widget/spell_school_tab_bg.dds"
					frame = 3
					framesize = { 140 70 }
					margin = { 0 0 }
					margin_bottom = 3
				}

				highlight_icon = {
					size = { 48 48 }
					#position = { 0 2 }
					parentanchor = center
					alwaystransparent = yes
					texture = "gfx/interface/spellbook_widget/school_destruction.dds"
				}

				using = tooltip_above
			}
			button_tab = {
				size = { 0 52 }
				layoutpolicy_horizontal = expanding

				tooltip = school_alteration
				down = "[VariableSystem.HasValue('ritual_school', 'alteration')]"
				onmousehierarchyenter = "[VariableSystem.Set('ritual_school', 'alteration')]"

				background = {
					texture = "gfx/interface/spellbook_widget/spell_school_tab_bg.dds"
					frame = 5
					framesize = { 140 70 }
					margin = { 0 0 }
					margin_bottom = 3
				}

				highlight_icon = {
					size = { 48 48 }
					position = { 0 2 }
					parentanchor = center
					alwaystransparent = yes
					texture = "gfx/interface/spellbook_widget/school_alteration.dds"
				}

				using = tooltip_above
			}
			button_tab = {
				size = { 0 52 }
				layoutpolicy_horizontal = expanding

				tooltip = school_illusion
				down = "[VariableSystem.HasValue('ritual_school', 'illusion')]"
				onmousehierarchyenter = "[VariableSystem.Set('ritual_school', 'illusion')]"

				background = {
					texture = "gfx/interface/spellbook_widget/spell_school_tab_bg.dds"
					frame = 2
					framesize = { 140 70 }
					margin = { 0 0 }
					margin_bottom = 3
				}

				highlight_icon = {
					size = { 48 48 }
					position = { 0 2 }
					parentanchor = center
					alwaystransparent = yes
					texture = "gfx/interface/spellbook_widget/school_illusion.dds"
				}

				using = tooltip_above
			}
			button_tab = {
				size = { 0 52 }
				layoutpolicy_horizontal = expanding

				tooltip = school_restoration
				down = "[VariableSystem.HasValue('ritual_school', 'restoration')]"
				onmousehierarchyenter = "[VariableSystem.Set('ritual_school', 'restoration')]"

				background = {
					texture = "gfx/interface/spellbook_widget/spell_school_tab_bg.dds"
					frame = 4
					framesize = { 140 70 }
					margin = { 0 0 }
					margin_bottom = 3
				}

				highlight_icon = {
					size = { 48 48 }
					position = { 0 2 }
					parentanchor = center
					alwaystransparent = yes
					texture = "gfx/interface/spellbook_widget/school_restoration.dds"
				}

				using = tooltip_above
			}
			button_tab = {
				size = { 0 52 }
				layoutpolicy_horizontal = expanding

				tooltip = school_necromancy
				down = "[VariableSystem.HasValue('ritual_school', 'necromancy')]"
				onmousehierarchyenter = "[VariableSystem.Set('ritual_school', 'necromancy')]"

				background = {
					texture = "gfx/interface/spellbook_widget/spell_school_tab_bg.dds"
					frame = 6
					framesize = { 140 70 }
					margin = { 0 0 }
					margin_bottom = 3
				}

				highlight_icon = {
					size = { 48 48 }
					position = { 0 2 }
					parentanchor = center
					alwaystransparent = yes
					texture = "gfx/interface/spellbook_widget/school_necromancy.dds"
				}

				using = tooltip_above
			}
		}
		dropDown = {
			size = { 610 110 }
			parentanchor = center
			datamodel = "[GetPlayer.MakeScope.GetList('ritual_available')]"

			onselectionchanged = "[PdxGuiWidget.FindChild('ritual_button').TriggerAnimation('ritual_select_drop')]" # in active_item. set var to string

			active_item = {
				container = {
					alwaystransparent = no
					button_standard_list = {
						name = "ritual_button"
						layoutpolicy_horizontal = expanding
						size = { 610 110 }
						parentanchor = center

						visible = "[ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).End )]"

						state = {
							name = "ritual_select_drop"
							on_start = "[ScriptedGui.Execute( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('ritual', MakeScopeFlag(Scope.GetFlagName) ).End )]"
						}

						button_trigger = none

						hbox = {
							layoutpolicy_vertical = expanding
							margin = { 10 0 }
							spacing = 7

							block "var_scope" {
								visible = "[GetPlayer.MakeScope.Var('ritual_slot_1').IsSet]"
								datacontext = "[GetModifier(Concatenate('modifier_ritual_', GetPlayer.MakeScope.Var('ritual_slot_1').GetFlagName))]"
							}

							highlight_icon = {
								name = "ritual_icon"
								visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).End )]"
								size = { 90 90 }
								texture = "gfx/interface/spellbook_widget/spell_school.dds"
								framesize = { 256 256 }
								block "school_frame" {
									frame = "[FixedPointToInt(EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_1').GetFlagName, '_school')))]"
								}
							}

							highlight_icon = {
								name = "ritual_icon_grey"
								visible = "[Not(ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).End ))]"
								effectname = "GreyedOut"
								tintcolor = { 0.6 0.6 0.6 1 }
								size = { 90 90 }
								texture = "gfx/interface/spellbook_widget/spell_school.dds"
								framesize = { 256 256 }
								block "school_frame" {
									frame = "[FixedPointToInt(EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_1').GetFlagName, '_school')))]"
								}
							}

							divider_light = {
								layoutpolicy_vertical = expanding

								widget = {
									size = { 0 0 }
									widget = {
										size = { 440 110 }
										position = { -107 0 }
										scissor = yes
										visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).End )]"

										highlight_icon = {
											size = { 530 120 }
											position = { -90 -4 }
											texture = "gfx/interface/spellbook_widget/spell_school_tab_bg.dds"
											block "school_frame" {
												frame = "[FixedPointToInt(EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_1').GetFlagName, '_school')))]"
											}
											framesize = { 140 70 }
											spriteType = Corneredstretched

											alpha = 0.3

											modify_texture = {
												texture = "gfx/interface/component_masks/mask_holding_illustration.dds"
												blend_mode = alphamultiply
											}

											using = Mask_Rough_Edges
										}
									}
								}
							}

							vbox = {
								margin = { 5 5 }
								margin_left = 8
								spacing = 5
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								#datacontext = "[GetScriptedGui('ritual_slot_1')]"

								hbox = {
									layoutpolicy_horizontal = expanding
									text_label_left = {
										name = "ritual_name"
										layoutpolicy_horizontal = expanding
										text = "[StaticModifier.GetName]"
										default_format = "#high"
										using = Font_Size_Medium
									}
									button_group = {
										onclick = "[ScriptedGui.Execute( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('ritual', MakeScopeFlag(Scope.GetFlagName) ).AddScope('suspend', MakeScopeBool('(bool)yes') ).End )]"
										#tooltip = "[SelectLocalization( ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).End ), 'ritual_active_tt', 'ritual_inactive_tt' )]"
										#using = tooltip_ne
										flowcontainer = {
											spacing = 5
											text_single = {
												parentanchor = vcenter
												align = nobaseline
												text = "[SelectLocalization( ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).End ), 'RITUAL_ACTIVE', 'RITUAL_INACTIVE' )]"
												using = Font_Size_Small
												default_format = "#clickable"
											}
											button_checkbox = {
												parentanchor = vcenter
												size = { 20 20 }
												checked = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).End )]"
											}
										}
									}
								}

								hbox = {
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding

									scrollarea = {
										name = "ritual_modifier_scrollarea"
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										alwaystransparent = yes

										scrollbarpolicy_horizontal = always_off

										scrollbar_vertical = {
											using = Scrollbar_Vertical

											blockoverride "alpha"{
												alpha = 0.6
											}
										}

										scrollwidget = {
											text_multi = {
												name = "ritual_modifiers"
												size = { 180 -1 }
												autoresize = yes
												max_width = 340
												text = "[StaticModifier.GetDesc]"
												fontsize = 15
												fontsize_min = 12
											}
										}
									}
									vbox = {
										layoutpolicy_vertical = expanding
										text_label_right = {
											block "ritual_cost" {
												text = "[magicka_i][EmptyScope.ScriptValue(Concatenate(GetPlayer.MakeScope.Var('ritual_slot_1').GetFlagName, '_upkeep'))|+=1]"
											}
										}
										expand = {}
									}
								}
							}
						}
						hbox = {
							layoutpolicy_vertical = expanding
							margin = { 10 0 }
							spacing = 7

							block "empty_visible" {
								visible = "[Not(GetPlayer.MakeScope.Var('ritual_slot_1').IsSet)]"
							}

							highlight_icon = {
								name = "ritual_icon"
								size = { 90 90 }
								texture = "gfx/interface/spellbook_widget/ritual_big.dds"
							}

							divider_light = {
								layoutpolicy_vertical = expanding
							}

							vbox = {
								margin = { 5 5 }
								margin_left = 8
								spacing = 5
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								hbox = {
									layoutpolicy_horizontal = expanding
									text_label_left = {
										name = "ritual_name"
										layoutpolicy_horizontal = expanding
										text = RITUAL_EMPTY
										default_format = "#clickable"
										using = Font_Size_Medium
									}
								}

								hbox = {
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding
								}
							}
						}
					}
				}
			}

			item = {
				container = {
					alwaystransparent = no
					#visible = "[VariableSystem.HasValue('ritual_school', 'restoration')]"
					visible = "[And( EqualTo_CFixedPoint( EmptyScope.ScriptValue(VariableSystem.Get('ritual_school')), EmptyScope.ScriptValue(Concatenate(Scope.GetFlagName, '_school')) ), GetScriptedGui('ritual_init').IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('ritual', MakeScopeFlag(Scope.GetFlagName) ).End ) )]"

					button_dropdown = {
						size = { 440 32 }
						button_trigger = none
						datacontext = "[GetModifier(Concatenate('modifier_ritual_', Scope.GetFlagName))]"

						#onclick = "[VariableSystem.Clear('ritual_button_1_open')]"

						hbox = {
							layoutpolicy_horizontal = expanding
							margin = { 15 0 }

							text_single = {
								text = "[StaticModifier.GetName]"
								default_format = "#clickable"
								align = nobaseline
								layoutpolicy_horizontal = expanding
							}

							text_single = {
								text = "[magicka_i][EmptyScope.ScriptValue(Concatenate(Scope.GetFlagName, '_upkeep'))|+=1]"
							}
						}
					}
				}
			}

			list = {
				scrollarea = {
					#position = { 0 110 }
					position = { 0 159 }
					maximumsize = { 440 320 }

					autoresizescrollarea = yes
					scrollbarpolicy_horizontal = always_off

					using = Background_DropDown

					state = {
						name = _show
						block "ritual_button_var_set" {
							on_start = "[GetVariableSystem.Set('ritual_button_1_open','true')]"
						}
					}

					state = {
						name = _hide
						block "ritual_button_var_clear" {
							on_start = "[GetVariableSystem.Clear('ritual_button_1_open')]"
						}
					}

					scrollwidget = {
						dynamicgridbox = {
							alwaystransparent = no
							ignoreinvisible = yes
						}
					}

					scrollbar_vertical = {
						using = Scrollbar_Vertical
					}
				}
			}
		}

		button_standard_list = {
			name = "ritual_button"
			layoutpolicy_horizontal = expanding
			size = { 610 110 }
			parentanchor = center

			visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).End ))]"
			enabled = no

			tooltip = "[ScriptedGui.IsValidTooltip( GuiScope.SetRoot(GetPlayer.MakeScope).End )]"

			hbox = {
				layoutpolicy_vertical = expanding
				margin = { 10 0 }
				spacing = 7

				highlight_icon = {
					name = "ritual_icon"
					size = { 90 90 }
					texture = "gfx/interface/spellbook_widget/ritual_big.dds"
					tintcolor = { 0.5 0.5 0.5 1 }
				}

				divider_light = {
					layoutpolicy_vertical = expanding
				}

				vbox = {
					margin = { 5 5 }
					margin_left = 8
					spacing = 5
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						text_label_left = {
							name = "ritual_name"
							layoutpolicy_horizontal = expanding
							text = RITUAL_EMPTY
							default_format = "#low"
							using = Font_Size_Medium
						}
					}

					hbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
					}
				}
			}
		}
	}

	Type ritual_stage_widget = widget {
		size = { 0 110 }
		layoutpolicy_horizontal = expanding

		datacontext = "[GetScriptedGui('grand_ritual')]"

		button = {
			size = { 100% 100% }
			block "ritual_stage_shown" {
				visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue(Scope.GetFlagName)) ).End )]"
			}

			block "ritual_stage_tooltip" {
				tooltip = "[Localize(Concatenate(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, Scope.GetFlagName), '_desc' ))]"
			}
			using = tooltip_above

			background = {
				size = { 100% 100% }
				texture = "gfx/interface/component_masks/mask_frame_horizontal.dds"
				tintcolor = { 0 0 0 0.6 }
				alpha = 0.9
			}

			background = {
				block "ritual_stage_not_valid" {
					visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue(Scope.GetFlagName)) ).End ))]"
				}
				size = { 100% 100% }
				texture = "gfx/interface/component_masks/mask_frame_horizontal.dds"
				tintcolor = { 0 0 0 0.8 }

				modify_texture = {
					texture = "gfx/interface/component_tiles/tile_frame_thin_02.dds"
					spriteType = Corneredtiled
					spriteborder = { 50 50 }
					blend_mode = alphamultiply
					alpha = 0.2
					texture_density = 2
				}
			}

			vbox = {
				block "ritual_stage_not_valid" {
					visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue(Scope.GetFlagName)) ).End ))]"
				}

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 5 }
				#margin_top = 18

				vbox = {

					text_multi = {
						layoutpolicy_horizontal = expanding
						block "ritual_stage_name" {
							text = "[Localize(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, Scope.GetFlagName))]"
						}
						autoresize = yes
						max_width = 170
						fontsize_min = 14
						default_format = "#low"
						#align = nobaseline
					}
				}
			}

			### TEXT ###
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				block "ritual_stage_valid" {
					visible = "[ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue(Scope.GetFlagName)) ).End )]"
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin = { 10 5 }
					#margin_top = 18


					vbox = {
						layoutpolicy_vertical = expanding

						text_multi = {
							layoutpolicy_horizontal = expanding
							block "ritual_stage_name" {
								text = "[Localize(Concatenate(GetPlayer.MakeScope.Var('grand_ritual').GetFlagName, Scope.GetFlagName))]"
							}
							autoresize = yes
							max_width = 170
							fontsize_min = 14
							default_format = "#high"
							#align = nobaseline
						}

						# text_single = {
						# 	visible = "[DynastyView.CanSelectPerk( DynastyPerk.Self )]"
						# 	text = "DYNASTY_VIEW_SHOW_UNLOCK"
						# 	default_format = "#I"
						# }
					}

					# tooltip_enabled = "[DynastyView.CanSelectPerk( DynastyPerk.Self )]"
					# tooltip = "UNLOCK_DYNASTY_PERK_TOOLTIP"
					# using = tooltip_se
				}
			}

			button_standard_clean = {
				block "ritual_stage_valid" {
					visible = "[ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('stage', MakeScopeValue(EmptyScope.ScriptValue(Scope.GetFlagName)) ).End )]"
				}
				size = { 100% 100% }
				alwaystransparent = yes

				animation_attention_text = {}

				background = {
					texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
					spriteType = Corneredtiled
					spriteborder = { 5 5 }
					margin = { -2 -2 }
				}
			}
		}
	}
}
Template ButtonSpellList {
	widget = {
		scissor = yes
		size = { 420 38 }

		highlight_icon = {
			size = { 420 70 }
			position = { -40 -5 }

			texture = "gfx/interface/spellbook_widget/spell_school_tab_bg.dds"
			frame = "[FixedPointToInt(GetPlayer.MakeScope.ScriptValue('spell_school_bg'))]"
			framesize = { 140 70 }
			spriteType = Corneredstretched
			spriteborder = { 1 1 }
			alpha = 0.6

			block "tint_greyout" {
				tintcolor = { 0.6 0.6 0.6 1.0 }
				effectname = "GreyedOut"
			}

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
				blend_mode = alphamultiply
			}

			using = Mask_Rough_Edges
		}
	}

	widget = {
		size = { 50 40 }
		position = { 0 0 }
		highlight_icon = {
			name = "spell_level_icon"
			size = { 32 32 }
			texture = "gfx/interface/spellbook_widget/spell_tier.dds"
			frame = "[FixedPointToInt(EmptyScope.ScriptValue(Concatenate( Scope.GetFlagName, '_level' )))]"
			framesize = { 128 128 }
			parentanchor = center
			using = Master_Button_Modify_Texture
			tooltip = spell_tier
			block "tint_greyout" {
				tintcolor = { 0.7 0.7 0.7 1.0 }
				effectname = "GreyedOut"
			}
		}
	}
	widget = {
		size = { 350 40 }
		position = { 50 0 }
		text_single = {
			name = "spell_name"
			parentanchor = vcenter
			text = spell_name
			layoutpolicy_horizontal = expanding
			align = top|left
			block "spell_font" {
				default_format = "#clickable"
			}
			margin = { 0 0 }
		}
	}
	widget = {
		size = { 130 40 }
		parentanchor = right
		
		position = { -50 0 }
		text_single = {
			name = "spell_cost"
			parentanchor = vcenter
			position = { 25 0 }
			text = "[EmptyScope.ScriptValue(Concatenate( Scope.GetFlagName, '_cost' ))|0]"
			layoutpolicy_horizontal = expanding
			align = top|left
			block "spell_font" {
				default_format = "#high"
			}
			margin = { 4 0 }
		}
		highlight_icon = {
			texture = "gfx/interface/icons/icon_magicka.dds"
			size = { 25 25 }
			parentanchor = vcenter
			alwaystransparent = yes
			block "tint_greyout" {
				tintcolor = { 0.5 0.5 0.5 1.0 }
				effectname = "GreyedOut"
			}
		}
		text_single = {
			name = "spell_cost_tt"
			parentanchor = vcenter
			size = { 25 25 }
			minimumsize = { 25 25 }
			maximumsize = { 25 25 }
			text = "[Concept( 'magicka', '    ' )]"
			align = vcenter
			fontsize = 25
		}
	}
	flowcontainer = {
		name = "spell_icons"
		parentanchor = right
		position = { -5 0 }
		ignoreinvisible = yes
		# widget = {
		#     size = { 40 40 }
		#     visible = "[Not( EqualTo_CFixedPoint( EmptyScope.ScriptValue(Concatenate( Scope.GetFlagName, '_cooldown' )), '(CFixedPoint)0' ) )]"
		#     highlight_icon = {
		#         name = "spell_cooldown_icon"
		#         size = { 34 34 }
		#         texture = "gfx/interface/icons/icon_time.dds"
		#         parentanchor = center
		#         tooltip = spell_cooldown
		#         block "tint_greyout" {
		#             tintcolor = { 0.7 0.7 0.7 1.0 }
		#             effectname = "GreyedOut"
		#         }
		#     }
		# }
		widget = {
			size = { 40 40 }
			visible = "[EqualTo_CFixedPoint( EmptyScope.ScriptValue(Concatenate( Scope.GetFlagName, '_province' )), '(CFixedPoint)1' )]"
			highlight_icon = {
				name = "spell_province_icon"
				size = { 32 32 }
				texture = "gfx/interface/icons/map_icons/onmap_holding_icon.dds"
				parentanchor = center
				tooltip = spell_province
				block "tint_greyout" {
					tintcolor = { 0.7 0.7 0.7 1.0 }
					effectname = "GreyedOut"
				}
			}
		}
		widget = {
			size = { 40 40 }
			visible = "[EqualTo_CFixedPoint( EmptyScope.ScriptValue(Concatenate( Scope.GetFlagName, '_hostile' )), '(CFixedPoint)1' )]"
			highlight_icon = {
				name = "spell_hostile_icon"
				size = { 34 34 }
				texture = "gfx/interface/icons/symbols/icon_warning.dds"
				parentanchor = center
				tooltip = spell_hostile
				block "tint_greyout" {
					effectname = "GreyedOut"
				}
			}
		}
	}
}
Template Animation_Grand_Ritual_Refresh
{
	state = {
		name = grand_ritual_refresh
		using = Animation_Refresh_FadeOut
		alpha = 0.8
	}

	state = {
		using = Animation_Refresh_FadeIn
		duration = 0.25
	}
}